<div class="max-w-content mx-auto"> 
  <nav class="flex flex-none justify-center items-center space-x-[8px] text-gray-medium mt-40 mb-4">
    <a href="/">Accueil</a>
    <span>—</span>
    <a href="#" class="text-black">Cave exclusive</a>
  </nav>
  <h1 class="text-center font-serif text-[90px]">Cave exclusive</h1>
  <div class="flex justify-evenly my-20">
   
    <div class="z-4">
      <span class="text-[16px] font-sans font-medium">Couleurs</span>
      <div class="custom-select w-[288px] rounded mt-2 border-2 border-green-light text-gray-dark">
        <svg width="24" height="24" class="absolute right-5 -z-10 top-[25%]" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 9L12 15L18 9" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <select>
          <option value="0">- Toutes les couleurs -</option>
          <option value="1">Vins rouge</option>
          <option value="2">Vins blanc</option>
          <option value="3">Vins rosé</option>
        </select>
      </div>
    </div>
    <div class="z-4">
      <span class="text-[16px] font-sans font-medium">Origines</span>
      <div class="custom-select w-[288px] rounded mt-2 border-2 border-green-light text-gray-dark">
        <svg width="24" height="24" class="absolute right-5 -z-10 top-[25%]" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 9L12 15L18 9" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <select>
          <option value="0">- Toutes les couleurs -</option>
          <option value="1">France</option>
          <option value="2">Espagne</option>
          <option value="3">Italie</option>
    
        </select>
      </div>
    </div>
    <div class="z-4">
      <span class="text-[16px] font-sans font-medium">Type de vins</span>
      <div class="custom-select w-[288px] rounded mt-2 border-2 border-green-light text-gray-dark">
        <svg width="24" height="24" class="absolute right-5 -z-10 top-[25%]" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 9L12 15L18 9" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <select>
          <option value="0">- Tous les types de vins -</option>
          <option value="1">Fruité</option>
          <option value="2">Epicé</option>
          <option value="3">Boisé</option>
          <option value="4">Floral</option>
          <option value="5">Léger</option>
          <option value="6">Puissant</option>
    
        </select>
      </div>
      </div>

    </div>
  <div class="mb-20">
    {%- paginate collections.all.products by section.settings.products_per_page -%}
      {%- if collections.all.products.size == 0 -%}
        <div class="collection collection--empty page-width" id="product-grid" data-id="{{ section.id }}">
          <div class="loading-overlay gradient"></div>
          <div class="title-wrapper center">
            <h2 class="title title--primary">
              {{ 'sections.collection_template.empty' | t }}<br>
              {{ 'sections.collection_template.use_fewer_filters_html' | t: link: collection.url, class: "underlined-link link" }}
            </h2>
          </div>
        </div>
      {%- else -%}
        <div class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}">
          <div class="loading-overlay gradient"></div>

          <ul id="product-grid" data-id="{{ section.id }}" class="
                            grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                            grid--{{ section.settings.columns_desktop }}-col-desktop">
            {%- for product in collections.all.products -%}
              {% assign productCollections = product.collections | map: "handle" %}
              {% unless productCollections contains 'abonnements' %}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}
                <li class="grid__item">
                  {% render 'custom-card-product',
                    product: product,
                  %}
                </li>
              {% endunless %}

            {%- endfor -%}
          </ul>

          {%- if paginate.pages > 1 -%}
            {% render 'pagination', paginate: paginate, anchor: '' %}
          {%- endif -%}
        </div>
      {%- endif -%}
    {%- endpaginate -%}
  </div>
</div>

{% schema %}

{
  "name": "Boutique Cave Exclusive",
  "settings": [],
  "presets": [
    {
      "name": "Boutique Cave Exclusive"
    }
  ]
}

{% endschema %}

{% stylesheet %}

.custom-select {
  position: relative;
}

.custom-select select {
  display: none; /*hide original SELECT element: */
}

/* Style the arrow inside the select element: */

/* Point the arrow upwards when the select box is open (active): */
.select-selected.select-arrow-active:after {
  border-color: transparent transparent #000 transparent;
  top: 7px;
}

/* style the items (options), including the selected item: */
.select-items div,.select-selected {
  padding: 8px 16px;
  border: 1px solid transparent;
  cursor:pointer2
}

/* Style items (options): */
.select-items {
  position: absolute;
  background-color:white;
  top: 90%;
  left: -2px;
  right: 0;
  width:288px;
  border:  solid #D9D7B1;
  border-width:0px 2px 2px 2px ;
  z-index: 4;
}

/* Hide the items when the select box is closed: */
.select-hide {
  display: none;
}

.select-items div:hover, .same-as-selected {
  font-weight: 500;
}


{% endstylesheet %}

{% javascript %}

var x, i, j, l, ll, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /* For each element, create a new DIV that will act as the selected item: */
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /* For each element, create a new DIV that will contain the option list: */
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /* For each option in the original select element,
    create a new DIV that will act as an option item: */
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /* When an item is clicked, update the original select box,
        and the selected item: */
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
    /* When the select box is clicked, close any other select boxes,
    and open/close the current select box: */
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
  });
}

function closeAllSelect(elmnt) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect); 

{% endjavascript %}
